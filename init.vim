" Check if we are using VSCode, and if so, let's not use any pluggin.
if exists('g:vscode')
	finish 
endif 

""" Plugin manager

call plug#begin('~/.local/share/nvim/plugged')

" Autocompletion Plugins
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' } " Autocompletion: back-end
Plug 'deoplete-plugins/deoplete-jedi'
Plug 'zchee/deoplete-clang'

" python setup
"Plug 'hkupty/iron.nvim' "Plugin to connect with REPL (IPython) 
"Plug 'kana/vim-textobj-user' "To recognize python cell
"Plug 'GCBallesteros/vim-textobj-hydrogen' "To recognize python cell
Plug 'jpalardy/vim-slime', { 'for': 'python' }
Plug 'hanschen/vim-ipython-cell', { 'for': 'python' }

" Layout plugins
Plug 'kyazdani42/nvim-web-devicons' " for file icons
Plug 'preservim/nerdtree' " File Explorer for VIM
Plug 'jistr/vim-nerdtree-tabs' " Second pluging to have the same tree on all tabs
Plug 'ryanoasis/vim-devicons' " Icons for NeerTree
Plug 'preservim/tagbar' " Function outline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" This two pluggin are for the uzzy finder
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Plugins to handle the writing / text
Plug 'jiangmiao/auto-pairs' " To close parenthesis, ...
Plug 'preservim/nerdcommenter' " Commenter
Plug 'dhruvasagar/vim-table-mode' " For Makdown Tables
Plug 'vim-scripts/argtextobj.vim' " Plugin to add 'argument' as text object

call plug#end()


" Clang completion for C++
" Add in your CMake the line: set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
" (This setup assumes that there is a build folder where the compilation flags
" will be generated by CMake)
let g:deoplete#sources#clang#libclang_path = '/usr/lib/llvm-10/lib/libclang-10.so.1'
let g:deoplete#sources#clang#clang_header = '/usr/include/clang'
let g:deoplete#sources#clang#clang_complete_database = './build'
set completeopt-=preview


""" Personal options

let mapleader = ","
let localleader = ","
set ignorecase " ignore case when searching
set hlsearch "highlight when searching a word
set tabstop=4
set shiftwidth=4
set autoindent
set number
syntax on 
set showmatch
set mouse=a

" Wrap only for markdown files
set nowrap
augroup Markdown
  autocmd!
  autocmd FileType markdown set wrap
augroup END

" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
   let @/ = ''
   if exists('#auto_highlight')
     au! auto_highlight
     augroup! auto_highlight
     setl updatetime=4000
     echo 'Highlight current word: off'
     return 0
  else
    augroup auto_highlight
    au!
    au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
  return 1
 endif
endfunction

" Set undodir (to have 'u' command forever)
set undodir=~/.config/nvim/.vimdid
set undofile

" Search and Replace selected text
vnoremap <C-r> "hy:%s/\<<C-r>h\>//g<left><left>

" jump to the previous function
nnoremap <silent> [f :call search('\(\(if\\|for\\|while\\|switch\\|catch\)\_s*\)\@64<!(\_[^)]*)\_[^;{}()]*\zs{', "bw")<CR>
	
" jump to the next function
nnoremap <silent> ]f :call search('\(\(if\\|for\\|while\\|switch\\|catch\)\_s*\)\@64<!(\_[^)]*)\_[^;{}()]*\zs{', "w")<CR>

" remove search highlight when pressing escape, until next search is triggered
nnoremap <esc><esc> :noh<return>

" Toggle the TagBar (outline)
nnoremap <C-z> :TagbarToggle<CR>

" Toggle the Tree Explorer
noremap <C-b> :NERDTreeTabsToggle<CR>
let NERDTreeMapOpenInTab='<C-t>'

" Sorting of tabexplore 
let NERDTreeSortOrder = ['[[extension]]']

" Shorcuts for my fuzzy finder 
nnoremap <leader>ff <cmd>:Files<cr>
nnoremap <leader>fg <cmd>:Rg<cr>

" Change the fuzzy finder command 
"command! -bang -nargs=* Rg
  "\ call fzf#vim#grep(
  "\   'rg --column --line-number --no-heading --color=always --smart-case -u -- '.shellescape(<q-args>), 1,
  "\   fzf#vim#with_preview(), <bang>0)
" Preview window on the upper side of the window with 40% height,
" hidden by default, ctrl-/ to toggle
let g:fzf_preview_window = ['up:40%:hidden', 'ctrl-/']

" Git push shortcut
nnoremap <C-s> :!/usr/bin/gp.sh "Updates from vim."<CR>

" For the LSP 
" (Go to .c file, if any)
nnoremap <leader>d :LspDefinition<CR>
" (Go to .h file, if any)
nnoremap <leader>D :LspDeclaration<CR> 
" LSP Config 
let g:lsp_diagnostics_enabled = 0         " disable diagnostics support

" for folding code 
" za = fold current indentation
" zR = unfold everything
" zM = folds everything
set foldmethod=indent
set foldlevelstart=20

" Use deoplete.
let g:deoplete#enable_at_startup = 1

" Pick the theme to use 
let g:airline_theme='light'

command! -bang -nargs=* Rgc
     \ call fzf#vim#grep("rg --column --line-number --color=always --smart-case ".shellescape(<q-args>), 1, fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right', 'ctrl-/'), <bang>0)

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   "rg --column --line-number --no-heading --color=always --smart-case -u -- ".shellescape(<q-args>), 1,
  \   fzf#vim#with_preview('up', 'ctrl-/'), 1)

""" IPython (Iron.Nvim) settings
" In the future, I can edit Iron.nvim plugins from this link: https://github.com/hkupty/iron.nvim/blob/bcea4d3ebfc0aa3187de4166c764a600bc81729b/doc/iron.txt#L172

" Use Esc to leave the terminal window
tnoremap <Esc> <C-\><C-n><C-w><C-w>

" Always the terminal in insert mode
autocmd BufWinEnter,WinEnter term://* startinsert

""" SLIME configurations + cim-ipython-cell
" https://github.com/jpalardy/vim-slime#neovim-terminal
" https://github.com/hanschen/vim-ipython-cell
" (Python)
let g:slime_target = "neovim"
let g:slime_paste_file = "$HOME/.slime_paste"
let g:slime_python_ipython = 1

" 'tt' used to create the IPython terminal
fun! StartREPL(repl)
  execute 'terminal '.a:repl
  setlocal nonumber
  let t:term_id = b:terminal_job_id
  wincmd p
  execute 'let b:slime_config = {"jobid": "'.t:term_id . '"}'
endfun
noremap <silent> tt :vsplit<bar>:call StartREPL('ipython --matplotlib')<CR>

" Other very useful commands
nnoremap <Leader>r :IPythonCellRun<CR>
nnoremap <Leader>c :IPythonCellExecuteCell<CR>
nnoremap <Leader>C :IPythonCellExecuteCellJump<CR>
nnoremap <Leader>x :IPythonCellClose<CR>

" NERD Commenter to behave like my VSCode 
map <C-k> <Plug>NERDCommenterToggle
